# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import migrations, models
import django.core.validators
import django.db.models.deletion
from django.conf import settings
import taggit.managers


class Migration(migrations.Migration):

    dependencies = [
        ('taggit', '0002_auto_20150616_2121'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('entries', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='ActivityGoal',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('goal_hours', models.DecimalField(max_digits=7, decimal_places=2)),
                ('date', models.DateField(null=True, verbose_name=b'Start Date', blank=True)),
                ('end_date', models.DateField(verbose_name=b'End Date')),
                ('activity', models.ForeignKey(blank=True, to='entries.Activity', help_text=b'Review <a href="/timepiece/activity/cheat-sheet" target="_blank">this reference</a> for guidance on activities.', null=True)),
                ('employee', models.ForeignKey(related_name='activity_goals', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'ordering': ('project__code', 'employee__last_name', 'employee__first_name', 'goal_hours'),
            },
        ),
        migrations.CreateModel(
            name='ApprovedMilestone',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('due_date', models.DateField()),
                ('created', models.DateTimeField()),
                ('modified', models.DateTimeField()),
                ('status', models.CharField(default=b'approved', max_length=8, choices=[(b'new', b'New'), (b'modified', b'Modified'), (b'approved', b'Approved'), (b'denied', b'Denied')])),
                ('approval_date', models.DateTimeField(null=True, blank=True)),
                ('approver', models.ForeignKey(related_name='approved_milestone_approver', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('author', models.ForeignKey(related_name='approved_milestone_author', to=settings.AUTH_USER_MODEL)),
                ('editor', models.ForeignKey(related_name='approved_milestone_editor', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('project__code', 'milestone', '-approval_date'),
            },
        ),
        migrations.CreateModel(
            name='Attribute',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('type', models.CharField(max_length=32, choices=[(b'project-type', b'Project Type'), (b'project-status', b'Project Status')])),
                ('label', models.CharField(max_length=255)),
                ('sort_order', models.SmallIntegerField(blank=True, null=True, choices=[(-20, -20), (-19, -19), (-18, -18), (-17, -17), (-16, -16), (-15, -15), (-14, -14), (-13, -13), (-12, -12), (-11, -11), (-10, -10), (-9, -9), (-8, -8), (-7, -7), (-6, -6), (-5, -5), (-4, -4), (-3, -3), (-2, -2), (-1, -1), (0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19), (20, 20)])),
                ('enable_timetracking', models.BooleanField(default=False, help_text=b'Enable time tracking functionality for projects with this type or status.')),
                ('billable', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('sort_order',),
                'db_table': 'timepiece_attribute',
            },
        ),
        migrations.CreateModel(
            name='Business',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('short_name', models.CharField(unique=True, max_length=3, blank=True)),
                ('description', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('external_id', models.CharField(max_length=32, blank=True)),
                ('classification', models.CharField(blank=True, max_length=8, choices=[(b'client', b'Client'), (b'construction', b'Construction'), (b'vendor', b'Vendor'), (b'org', b'Organization'), (b'other', b'Other')])),
                ('active', models.BooleanField(default=False)),
                ('status', models.CharField(blank=True, max_length=16, null=True, choices=[(b'evaluation', b'Evaluation'), (b'prospective', b'Prospective'), (b'approved', b'Approved'), (b'not-approved', b'Not Approved'), (b'other', b'Other')])),
                ('billing_street', models.CharField(max_length=255, blank=True)),
                ('billing_street_2', models.CharField(max_length=255, blank=True)),
                ('billing_city', models.CharField(max_length=255, blank=True)),
                ('billing_state', models.CharField(blank=True, max_length=2, choices=[(b'AL', b'Alabama'), (b'AK', b'Alaska'), (b'AZ', b'Arizona'), (b'AR', b'Arkansas'), (b'CA', b'California'), (b'CO', b'Colorado'), (b'CT', b'Connecticut'), (b'DE', b'Delaware'), (b'FL', b'Florida'), (b'GA', b'Georgia'), (b'HI', b'Hawaii'), (b'ID', b'Idaho'), (b'IL', b'Illinois'), (b'IN', b'Indiana'), (b'IA', b'Iowa'), (b'KS', b'Kansas'), (b'KY', b'Kentucky'), (b'LA', b'Louisiana'), (b'ME', b'Maine'), (b'MD', b'Maryland'), (b'MA', b'Massachusetts'), (b'MI', b'Michigan'), (b'MN', b'Minnesota'), (b'MS', b'Mississippi'), (b'MO', b'Missouri'), (b'MT', b'Montana'), (b'NE', b'Nebraska'), (b'NV', b'Nevada'), (b'NH', b'New Hampshire'), (b'NJ', b'New Jersey'), (b'NM', b'New Mexico'), (b'NY', b'New York'), (b'NC', b'North Carolina'), (b'ND', b'North Dakota'), (b'OH', b'Ohio'), (b'OK', b'Oklahoma'), (b'OR', b'Oregon'), (b'PA', b'Pennsylvania'), (b'RI', b'Rhode Island'), (b'SC', b'South Carolina'), (b'SD', b'South Dakota'), (b'TN', b'Tennessee'), (b'TX', b'Texas'), (b'UT', b'Utah'), (b'VT', b'Vermont'), (b'VA', b'Virginia'), (b'WA', b'Washington'), (b'WV', b'West Virginia'), (b'WI', b'Wisconsin'), (b'WY', b'Wyoming')])),
                ('billing_postalcode', models.CharField(max_length=32, blank=True)),
                ('billing_mailstop', models.CharField(max_length=16, verbose_name=b'Billing Zip+4', blank=True)),
                ('billing_country', models.CharField(max_length=128, blank=True)),
                ('billing_lat', models.FloatField(help_text=b'This is automatically set using the Google Maps Geocode API on save.', null=True, verbose_name=b'Billing Latitude', blank=True)),
                ('billing_lon', models.FloatField(help_text=b'This is automatically set using the Google Maps Geocode API on save.', null=True, verbose_name=b'Billing Longitude', blank=True)),
                ('shipping_street', models.CharField(max_length=255, blank=True)),
                ('shipping_street_2', models.CharField(max_length=255, blank=True)),
                ('shipping_city', models.CharField(max_length=255, blank=True)),
                ('shipping_state', models.CharField(blank=True, max_length=2, choices=[(b'AL', b'Alabama'), (b'AK', b'Alaska'), (b'AZ', b'Arizona'), (b'AR', b'Arkansas'), (b'CA', b'California'), (b'CO', b'Colorado'), (b'CT', b'Connecticut'), (b'DE', b'Delaware'), (b'FL', b'Florida'), (b'GA', b'Georgia'), (b'HI', b'Hawaii'), (b'ID', b'Idaho'), (b'IL', b'Illinois'), (b'IN', b'Indiana'), (b'IA', b'Iowa'), (b'KS', b'Kansas'), (b'KY', b'Kentucky'), (b'LA', b'Louisiana'), (b'ME', b'Maine'), (b'MD', b'Maryland'), (b'MA', b'Massachusetts'), (b'MI', b'Michigan'), (b'MN', b'Minnesota'), (b'MS', b'Mississippi'), (b'MO', b'Missouri'), (b'MT', b'Montana'), (b'NE', b'Nebraska'), (b'NV', b'Nevada'), (b'NH', b'New Hampshire'), (b'NJ', b'New Jersey'), (b'NM', b'New Mexico'), (b'NY', b'New York'), (b'NC', b'North Carolina'), (b'ND', b'North Dakota'), (b'OH', b'Ohio'), (b'OK', b'Oklahoma'), (b'OR', b'Oregon'), (b'PA', b'Pennsylvania'), (b'RI', b'Rhode Island'), (b'SC', b'South Carolina'), (b'SD', b'South Dakota'), (b'TN', b'Tennessee'), (b'TX', b'Texas'), (b'UT', b'Utah'), (b'VT', b'Vermont'), (b'VA', b'Virginia'), (b'WA', b'Washington'), (b'WV', b'West Virginia'), (b'WI', b'Wisconsin'), (b'WY', b'Wyoming')])),
                ('shipping_postalcode', models.CharField(max_length=32, blank=True)),
                ('shipping_mailstop', models.CharField(max_length=16, verbose_name=b'Shipping Zip+4', blank=True)),
                ('shipping_country', models.CharField(max_length=128, blank=True)),
                ('shipping_lat', models.FloatField(help_text=b'This is automatically set using the Google Maps Geocode API on save.', null=True, verbose_name=b'Shipping Latitude', blank=True)),
                ('shipping_lon', models.FloatField(help_text=b'This is automatically set using the Google Maps Geocode API on save.', null=True, verbose_name=b'Shipping Longitude', blank=True)),
                ('phone', models.CharField(max_length=16, blank=True)),
                ('fax', models.CharField(max_length=16, blank=True)),
                ('website', models.CharField(max_length=255, blank=True)),
                ('account_number', models.CharField(max_length=255, blank=True)),
                ('industry', models.CharField(blank=True, max_length=64, choices=[(b'aerospace', b'Aerospace'), (b'airlines', b'Airlines'), (b'avionics', b'Avionics'), (b'construct', b'Construction'), (b'engineering', b'Engineering'), (b'shippping', b'Shipping'), (b'transportation', b'Transportation'), (b'other', b'Other')])),
                ('ownership', models.CharField(max_length=255, blank=True)),
                ('annual_revenue', models.FloatField(null=True, blank=True)),
                ('num_of_employees', models.PositiveIntegerField(null=True, verbose_name=b'Number of Employees', blank=True)),
                ('ticker_symbol', models.CharField(max_length=32, blank=True)),
                ('account_owner', models.ForeignKey(related_name='biz_account_holder', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('poc', models.ForeignKey(related_name='business_poc_old', verbose_name=b'Old Primary Contact (User)', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'ordering': ('name',),
                'db_table': 'timepiece_business',
                'verbose_name_plural': 'Businesses',
                'permissions': (('view_business', 'Can view businesses'),),
            },
        ),
        migrations.CreateModel(
            name='BusinessAttachment',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('file_id', models.CharField(max_length=24)),
                ('filename', models.CharField(max_length=128)),
                ('upload_time', models.DateTimeField(auto_now_add=True)),
                ('description', models.TextField(blank=True)),
                ('deleted', models.BooleanField(default=False)),
                ('business', models.ForeignKey(to='crm.Business')),
                ('uploader', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BusinessDepartment',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('short_name', models.CharField(max_length=255, blank=True)),
                ('active', models.BooleanField(default=False)),
                ('bd_billing_street', models.CharField(max_length=255, verbose_name=b'Billing Street', blank=True)),
                ('bd_billing_city', models.CharField(max_length=255, verbose_name=b'Billing City', blank=True)),
                ('bd_billing_state', models.CharField(blank=True, max_length=2, verbose_name=b'Billing State', choices=[(b'AL', b'Alabama'), (b'AK', b'Alaska'), (b'AZ', b'Arizona'), (b'AR', b'Arkansas'), (b'CA', b'California'), (b'CO', b'Colorado'), (b'CT', b'Connecticut'), (b'DE', b'Delaware'), (b'FL', b'Florida'), (b'GA', b'Georgia'), (b'HI', b'Hawaii'), (b'ID', b'Idaho'), (b'IL', b'Illinois'), (b'IN', b'Indiana'), (b'IA', b'Iowa'), (b'KS', b'Kansas'), (b'KY', b'Kentucky'), (b'LA', b'Louisiana'), (b'ME', b'Maine'), (b'MD', b'Maryland'), (b'MA', b'Massachusetts'), (b'MI', b'Michigan'), (b'MN', b'Minnesota'), (b'MS', b'Mississippi'), (b'MO', b'Missouri'), (b'MT', b'Montana'), (b'NE', b'Nebraska'), (b'NV', b'Nevada'), (b'NH', b'New Hampshire'), (b'NJ', b'New Jersey'), (b'NM', b'New Mexico'), (b'NY', b'New York'), (b'NC', b'North Carolina'), (b'ND', b'North Dakota'), (b'OH', b'Ohio'), (b'OK', b'Oklahoma'), (b'OR', b'Oregon'), (b'PA', b'Pennsylvania'), (b'RI', b'Rhode Island'), (b'SC', b'South Carolina'), (b'SD', b'South Dakota'), (b'TN', b'Tennessee'), (b'TX', b'Texas'), (b'UT', b'Utah'), (b'VT', b'Vermont'), (b'VA', b'Virginia'), (b'WA', b'Washington'), (b'WV', b'West Virginia'), (b'WI', b'Wisconsin'), (b'WY', b'Wyoming')])),
                ('bd_billing_postalcode', models.CharField(max_length=32, verbose_name=b'Billing Postal Code', blank=True)),
                ('bd_billing_mailstop', models.CharField(max_length=16, verbose_name=b'Billing Mailstop', blank=True)),
                ('bd_billing_country', models.CharField(max_length=128, verbose_name=b'Billing Country', blank=True)),
                ('bd_billing_lat', models.FloatField(help_text=b'This is automatically set using the Google Maps Geocode API on save.', null=True, verbose_name=b'Billing Latitude', blank=True)),
                ('bd_billing_lon', models.FloatField(help_text=b'This is automatically set using the Google Maps Geocode API on save.', null=True, verbose_name=b'Billing Longitude', blank=True)),
                ('bd_shipping_street', models.CharField(max_length=255, verbose_name=b'Shipping Street', blank=True)),
                ('bd_shipping_city', models.CharField(max_length=255, verbose_name=b'Shipping City', blank=True)),
                ('bd_shipping_state', models.CharField(blank=True, max_length=2, verbose_name=b'Shipping State', choices=[(b'AL', b'Alabama'), (b'AK', b'Alaska'), (b'AZ', b'Arizona'), (b'AR', b'Arkansas'), (b'CA', b'California'), (b'CO', b'Colorado'), (b'CT', b'Connecticut'), (b'DE', b'Delaware'), (b'FL', b'Florida'), (b'GA', b'Georgia'), (b'HI', b'Hawaii'), (b'ID', b'Idaho'), (b'IL', b'Illinois'), (b'IN', b'Indiana'), (b'IA', b'Iowa'), (b'KS', b'Kansas'), (b'KY', b'Kentucky'), (b'LA', b'Louisiana'), (b'ME', b'Maine'), (b'MD', b'Maryland'), (b'MA', b'Massachusetts'), (b'MI', b'Michigan'), (b'MN', b'Minnesota'), (b'MS', b'Mississippi'), (b'MO', b'Missouri'), (b'MT', b'Montana'), (b'NE', b'Nebraska'), (b'NV', b'Nevada'), (b'NH', b'New Hampshire'), (b'NJ', b'New Jersey'), (b'NM', b'New Mexico'), (b'NY', b'New York'), (b'NC', b'North Carolina'), (b'ND', b'North Dakota'), (b'OH', b'Ohio'), (b'OK', b'Oklahoma'), (b'OR', b'Oregon'), (b'PA', b'Pennsylvania'), (b'RI', b'Rhode Island'), (b'SC', b'South Carolina'), (b'SD', b'South Dakota'), (b'TN', b'Tennessee'), (b'TX', b'Texas'), (b'UT', b'Utah'), (b'VT', b'Vermont'), (b'VA', b'Virginia'), (b'WA', b'Washington'), (b'WV', b'West Virginia'), (b'WI', b'Wisconsin'), (b'WY', b'Wyoming')])),
                ('bd_shipping_postalcode', models.CharField(max_length=32, verbose_name=b'Shipping Postal', blank=True)),
                ('bd_shipping_mailstop', models.CharField(max_length=16, verbose_name=b'Shipping Mailstop', blank=True)),
                ('bd_shipping_country', models.CharField(max_length=128, verbose_name=b'Shipping Country', blank=True)),
                ('bd_shipping_lat', models.FloatField(help_text=b'This is automatically set using the Google Maps Geocode API on save.', null=True, verbose_name=b'Shipping Latitude', blank=True)),
                ('bd_shipping_lon', models.FloatField(help_text=b'This is automatically set using the Google Maps Geocode API on save.', null=True, verbose_name=b'Shipping Longitude', blank=True)),
                ('business', models.ForeignKey(to='crm.Business')),
            ],
        ),
        migrations.CreateModel(
            name='BusinessNote',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('edited', models.BooleanField(default=False)),
                ('last_edited', models.DateTimeField(auto_now=True)),
                ('text', models.TextField()),
                ('author', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
                ('business', models.ForeignKey(to='crm.Business')),
                ('parent', models.ForeignKey(blank=True, to='crm.BusinessNote', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('salutation', models.CharField(blank=True, max_length=8, choices=[(b'mr', b'Mr.'), (b'mrs', b'Mrs.'), (b'dr', b'Dr.'), (b'ms', b'Ms.')])),
                ('first_name', models.CharField(max_length=255, blank=True)),
                ('last_name', models.CharField(max_length=255, blank=True)),
                ('title', models.CharField(max_length=255, blank=True)),
                ('email', models.CharField(max_length=255, blank=True)),
                ('office_phone', models.CharField(max_length=24, blank=True)),
                ('mobile_phone', models.CharField(max_length=24, blank=True)),
                ('home_phone', models.CharField(max_length=24, blank=True)),
                ('other_phone', models.CharField(max_length=24, blank=True)),
                ('fax', models.CharField(max_length=24, blank=True)),
                ('assistant_name', models.CharField(max_length=255, blank=True)),
                ('assistant_phone', models.CharField(max_length=24, blank=True)),
                ('assistant_email', models.CharField(max_length=255, blank=True)),
                ('mailing_street', models.CharField(max_length=255, verbose_name=b'Mailing Street', blank=True)),
                ('mailing_city', models.CharField(max_length=255, verbose_name=b'Mailing City', blank=True)),
                ('mailing_state', models.CharField(blank=True, max_length=2, verbose_name=b'Mailing State', choices=[(b'AL', b'Alabama'), (b'AK', b'Alaska'), (b'AZ', b'Arizona'), (b'AR', b'Arkansas'), (b'CA', b'California'), (b'CO', b'Colorado'), (b'CT', b'Connecticut'), (b'DE', b'Delaware'), (b'FL', b'Florida'), (b'GA', b'Georgia'), (b'HI', b'Hawaii'), (b'ID', b'Idaho'), (b'IL', b'Illinois'), (b'IN', b'Indiana'), (b'IA', b'Iowa'), (b'KS', b'Kansas'), (b'KY', b'Kentucky'), (b'LA', b'Louisiana'), (b'ME', b'Maine'), (b'MD', b'Maryland'), (b'MA', b'Massachusetts'), (b'MI', b'Michigan'), (b'MN', b'Minnesota'), (b'MS', b'Mississippi'), (b'MO', b'Missouri'), (b'MT', b'Montana'), (b'NE', b'Nebraska'), (b'NV', b'Nevada'), (b'NH', b'New Hampshire'), (b'NJ', b'New Jersey'), (b'NM', b'New Mexico'), (b'NY', b'New York'), (b'NC', b'North Carolina'), (b'ND', b'North Dakota'), (b'OH', b'Ohio'), (b'OK', b'Oklahoma'), (b'OR', b'Oregon'), (b'PA', b'Pennsylvania'), (b'RI', b'Rhode Island'), (b'SC', b'South Carolina'), (b'SD', b'South Dakota'), (b'TN', b'Tennessee'), (b'TX', b'Texas'), (b'UT', b'Utah'), (b'VT', b'Vermont'), (b'VA', b'Virginia'), (b'WA', b'Washington'), (b'WV', b'West Virginia'), (b'WI', b'Wisconsin'), (b'WY', b'Wyoming')])),
                ('mailing_postalcode', models.CharField(max_length=32, verbose_name=b'Mailing Postal', blank=True)),
                ('mailing_mailstop', models.CharField(max_length=16, verbose_name=b'Mailing Mailstop', blank=True)),
                ('mailing_country', models.CharField(max_length=128, verbose_name=b'Mailing Country', blank=True)),
                ('mailing_lat', models.FloatField(help_text=b'This is automatically set using the Google Maps Geocode API on save.', null=True, verbose_name=b'Mailing Latitude', blank=True)),
                ('mailing_lon', models.FloatField(help_text=b'This is automatically set using the Google Maps Geocode API on save.', null=True, verbose_name=b'Mailing Longitude', blank=True)),
                ('other_street', models.CharField(max_length=255, verbose_name=b'Other Street', blank=True)),
                ('other_city', models.CharField(max_length=255, verbose_name=b'Other City', blank=True)),
                ('other_state', models.CharField(blank=True, max_length=2, verbose_name=b'Other State', choices=[(b'AL', b'Alabama'), (b'AK', b'Alaska'), (b'AZ', b'Arizona'), (b'AR', b'Arkansas'), (b'CA', b'California'), (b'CO', b'Colorado'), (b'CT', b'Connecticut'), (b'DE', b'Delaware'), (b'FL', b'Florida'), (b'GA', b'Georgia'), (b'HI', b'Hawaii'), (b'ID', b'Idaho'), (b'IL', b'Illinois'), (b'IN', b'Indiana'), (b'IA', b'Iowa'), (b'KS', b'Kansas'), (b'KY', b'Kentucky'), (b'LA', b'Louisiana'), (b'ME', b'Maine'), (b'MD', b'Maryland'), (b'MA', b'Massachusetts'), (b'MI', b'Michigan'), (b'MN', b'Minnesota'), (b'MS', b'Mississippi'), (b'MO', b'Missouri'), (b'MT', b'Montana'), (b'NE', b'Nebraska'), (b'NV', b'Nevada'), (b'NH', b'New Hampshire'), (b'NJ', b'New Jersey'), (b'NM', b'New Mexico'), (b'NY', b'New York'), (b'NC', b'North Carolina'), (b'ND', b'North Dakota'), (b'OH', b'Ohio'), (b'OK', b'Oklahoma'), (b'OR', b'Oregon'), (b'PA', b'Pennsylvania'), (b'RI', b'Rhode Island'), (b'SC', b'South Carolina'), (b'SD', b'South Dakota'), (b'TN', b'Tennessee'), (b'TX', b'Texas'), (b'UT', b'Utah'), (b'VT', b'Vermont'), (b'VA', b'Virginia'), (b'WA', b'Washington'), (b'WV', b'West Virginia'), (b'WI', b'Wisconsin'), (b'WY', b'Wyoming')])),
                ('other_postalcode', models.CharField(max_length=32, verbose_name=b'Other Postal', blank=True)),
                ('other_mailstop', models.CharField(max_length=16, verbose_name=b'Other Mailstop', blank=True)),
                ('other_country', models.CharField(max_length=128, verbose_name=b'Other Country', blank=True)),
                ('other_lat', models.FloatField(help_text=b'This is automatically set using the Google Maps Geocode API on save.', null=True, verbose_name=b'Other Latitude', blank=True)),
                ('other_lon', models.FloatField(help_text=b'This is automatically set using the Google Maps Geocode API on save.', null=True, verbose_name=b'Other Longitude', blank=True)),
                ('has_opted_out_of_email', models.BooleanField(default=False)),
                ('has_opted_out_of_fax', models.BooleanField(default=False)),
                ('do_not_call', models.BooleanField(default=False)),
                ('birthday', models.DateField(null=True, blank=True)),
                ('assistant', models.ForeignKey(blank=True, to='crm.Contact', help_text=b'If the assistant is another contact, you can set that here.', null=True)),
                ('business', models.ForeignKey(blank=True, to='crm.Business', null=True)),
                ('business_department', models.ForeignKey(blank=True, to='crm.BusinessDepartment', null=True)),
                ('lead_source', models.ForeignKey(related_name='contact_lead_source', to=settings.AUTH_USER_MODEL)),
                ('tags', taggit.managers.TaggableManager(to='taggit.Tag', through='taggit.TaggedItem', help_text='A comma-separated list of tags.', verbose_name='Tags')),
                ('user', models.OneToOneField(related_name='contact', null=True, on_delete=django.db.models.deletion.SET_NULL, blank=True, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('last_name', 'first_name'),
                'permissions': (('view_contact', 'Can view contact'),),
            },
        ),
        migrations.CreateModel(
            name='ContactNote',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('edited', models.BooleanField(default=False)),
                ('last_edited', models.DateTimeField(auto_now=True)),
                ('text', models.TextField()),
                ('author', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
                ('contact', models.ForeignKey(to='crm.Contact')),
                ('parent', models.ForeignKey(blank=True, to='crm.ContactNote', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(default=b'other', max_length=16, choices=[(b'admin', b'Admin'), (b'elec-avionics', b'Electrical/Avionics'), (b'finance', b'Finance'), (b'hr', b'Human Resources'), (b'integration', b'Integration'), (b'it', b'Information Technology'), (b'marketing', b'Marketing'), (b'mech', b'Mechanical Systems'), (b'ops', b'Operations'), (b'sales', b'Sales'), (b'struct', b'Structures'), (b'tech-serv', b'Technical Services'), (b'other', b'Other')])),
            ],
        ),
        migrations.CreateModel(
            name='DistinguishingValueChallenge',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('order', models.PositiveSmallIntegerField(help_text=b'Define order/priority of this DV.')),
                ('probing_question', models.TextField(help_text=b'Provide a probing question that could be used in a conversation with a potential client.', blank=True)),
                ('description', models.TextField(help_text=b'Have the potential customer describe the pain/challenge.', blank=True)),
                ('short_name', models.CharField(help_text=b'Provide a short (32 chars or less) identifying name for this DV.', max_length=32, blank=True)),
                ('longevity', models.TextField(help_text=b'How long have you been facing this pain/challenge?', blank=True)),
                ('start_date', models.DateField(help_text=b'Based on the response to the above question, estimate the date when the pain/challenge started.', null=True, blank=True)),
                ('steps', models.TextField(help_text=b'What steps have you already taken to overcome it?', blank=True)),
                ('results', models.TextField(help_text=b'What were the results from the steps already taken?', blank=True)),
                ('due', models.TextField(help_text=b'Do you have a specific timeline for overcoming this pain/challenge?', blank=True)),
                ('due_date', models.DateField(help_text=b'If possible, set a specific date for the timeline described above.', null=True, blank=True)),
                ('cost', models.TextField(help_text=b'What do you estimate this challenges costs you (in time or money) each month?', blank=True)),
                ('confirm_resources', models.BooleanField(default=False, help_text=b'Have you confirmed that AAC Engineering has adequate resources to support the proposed project? (Contact the Operations Manager.)')),
                ('resources_notes', models.TextField(help_text=b'Optionally add notes on the available resources.', blank=True)),
                ('benefits_begin', models.TextField(help_text=b'When do you expect benefits from the project execution to begin?', blank=True)),
                ('date_benefits_begin', models.DateField(help_text=b'If possible, set a specific date for when benefits are to begin.', null=True, blank=True)),
                ('confirm', models.BooleanField(default=False, help_text=b'Confirm Evaluation and Decision Process.')),
                ('confirm_notes', models.TextField(help_text=b'Optionally add notes on the confirmation.', blank=True)),
                ('commitment', models.BooleanField(default=False, help_text=b'Commitment: Agree on clear outcomes.')),
                ('commitment_notes', models.TextField(help_text=b'Optionally add notes on the commitment.', blank=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('closed', models.BooleanField(default=False, help_text=b'Check this box once this DV is resolved and/or closed.')),
                ('business', models.ForeignKey(blank=True, to='crm.Business', null=True)),
            ],
            options={
                'ordering': ['order', '-due_date'],
                'verbose_name': 'Differentiating Value',
                'verbose_name_plural': 'Differentiating Values',
            },
        ),
        migrations.CreateModel(
            name='DVCostItem',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(help_text=b'Provide a summary description of the cost line item.', max_length=64)),
                ('details', models.TextField(help_text=b'Optionally add more details about this cost item.  You can reference an attachmen here as well.', blank=True)),
                ('cost', models.DecimalField(help_text=b'Either set a cost or define man hours and rate below.', null=True, max_digits=11, decimal_places=2, blank=True)),
                ('man_hours', models.DecimalField(null=True, verbose_name=b'Man Hours', max_digits=11, decimal_places=2, blank=True)),
                ('rate', models.DecimalField(null=True, verbose_name=b'Houlry Rate', max_digits=6, decimal_places=2, blank=True)),
                ('dv', models.ForeignKey(to='crm.DistinguishingValueChallenge')),
            ],
            options={
                'ordering': ['description'],
            },
        ),
        migrations.CreateModel(
            name='Lead',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('title', models.CharField(help_text=b'Provide a name or title to identify the lead.', max_length=64)),
                ('status', models.CharField(default=b'0-open', max_length=16, choices=[(b'0-open', b'Open'), (b'1-contacting', b'Contacting'), (b'2-contacted', b'Contacted'), (b'3-bad-info', b'Bad Information'), (b'4-no-response', b'No Response'), (b'5-qualified', b'Qualified'), (b'6-garden', b'Garden'), (b'7-unqualified', b'Unqualified'), (b'8-complete', b'Complete')])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('aac_poc', models.ForeignKey(related_name='lead_poc', verbose_name=b'AAC Primary', to=settings.AUTH_USER_MODEL)),
                ('business_placeholder', models.ForeignKey(blank=True, to='crm.Business', help_text=b'If a Primary Contact has not yet been identified, select the Business this lead is associated with.  Once a Contact is identified, this field will be ignored.  If the business is not yet in the Business database, <a href="/timepiece/business/create" target="_blank">add</a> it first.', null=True, verbose_name=b'Business')),
                ('contacts', models.ManyToManyField(related_name='lead_contacts', null=True, verbose_name=b'Other Contacts', to='crm.Contact', blank=True)),
                ('created_by', models.ForeignKey(related_name='lead_created_by', to=settings.AUTH_USER_MODEL)),
                ('last_editor', models.ForeignKey(related_name='lead_edited_by', to=settings.AUTH_USER_MODEL)),
                ('lead_source', models.ForeignKey(related_name='lead_source', to=settings.AUTH_USER_MODEL)),
                ('primary_contact', models.ForeignKey(blank=True, to='crm.Contact', help_text=b'Search for a Contact to select as the Primary Contact for this lead.  If the contact is not yet in the Contact database, <a href="/timepiece/contact/create" target="_blank">add</a> them first.  If a contact is not yet identified, you can select a Business instead.', null=True, verbose_name=b'Primary Contact')),
                ('tags', taggit.managers.TaggableManager(to='taggit.Tag', through='taggit.TaggedItem', help_text='A comma-separated list of tags.', verbose_name='Tags')),
            ],
            options={
                'ordering': ['status', 'title'],
            },
        ),
        migrations.CreateModel(
            name='LeadAttachment',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('file_id', models.CharField(max_length=24)),
                ('filename', models.CharField(max_length=128)),
                ('upload_time', models.DateTimeField(auto_now_add=True)),
                ('description', models.TextField(blank=True)),
                ('deleted', models.BooleanField(default=False)),
                ('lead', models.ForeignKey(to='crm.Lead')),
                ('uploader', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LeadHistory',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('status', models.CharField(max_length=16, choices=[(b'0-open', b'Open'), (b'1-contacting', b'Contacting'), (b'2-contacted', b'Contacted'), (b'3-bad-info', b'Bad Information'), (b'4-no-response', b'No Response'), (b'5-qualified', b'Qualified'), (b'6-garden', b'Garden'), (b'7-unqualified', b'Unqualified'), (b'8-complete', b'Complete')])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('lead', models.ForeignKey(to='crm.Lead')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LeadNote',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('edited', models.BooleanField(default=False)),
                ('last_edited', models.DateTimeField(auto_now=True)),
                ('text', models.TextField()),
                ('author', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
                ('lead', models.ForeignKey(to='crm.Lead')),
                ('parent', models.ForeignKey(blank=True, to='crm.LeadNote', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='LimitedAccessUserProfile',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('seating', models.CharField(blank=True, max_length=8, verbose_name=b'Airplane Seating Preference', choices=[(b'window', b'Window'), (b'aisle', b'Aisle')])),
                ('ground_transportation', models.TextField(verbose_name=b'Rental Car / Shuttle / Taxi', blank=True)),
                ('hotel_brand', models.CharField(blank=True, max_length=16, choices=[(b'Hilton', b'Hilton'), (b'Marriott', b'Marriott'), (b'IGH', b'IGH')])),
                ('hotel_accommodatations', models.TextField(verbose_name=b'Hotel Accommodations', blank=True)),
                ('frequent_flyer', models.TextField(verbose_name=b'Frequeny Flyer #s', blank=True)),
                ('rental_car', models.TextField(verbose_name=b'Rental Car Loyalty #s', blank=True)),
                ('hotel', models.TextField(verbose_name=b'Hotel Loyalty #s', blank=True)),
                ('gift_card', models.TextField(verbose_name=b'Preferred Gift Card', blank=True)),
                ('coffee_shops', models.TextField(verbose_name=b'Preferred Coffee Shops', blank=True)),
                ('other_gift', models.TextField(verbose_name=b'Other Gift Preferences', blank=True)),
                ('coffees', models.TextField(verbose_name=b'In Office Coffees', blank=True)),
                ('teas', models.TextField(verbose_name=b'In Office Teas', blank=True)),
                ('snacks', models.TextField(verbose_name=b'In Office Snacks', blank=True)),
                ('sandwich', models.TextField(verbose_name=b'Sandwich & Condiments', blank=True)),
                ('soup', models.TextField(blank=True)),
                ('salad', models.TextField(verbose_name=b'Salad Type and Dressing', blank=True)),
                ('pizza', models.TextField(blank=True)),
                ('pasts', models.TextField(verbose_name=b'Pasta', blank=True)),
                ('chipotle', models.TextField(blank=True)),
                ('other', models.TextField(blank=True)),
                ('birthday_celebration', models.BooleanField(default=True)),
                ('birthday_month', models.IntegerField(blank=True, null=True, choices=[(1, b'January'), (2, b'February'), (3, b'March'), (4, b'April'), (5, b'May'), (6, b'June'), (7, b'July'), (8, b'August'), (9, b'September'), (10, b'October'), (11, b'November'), (12, b'December')])),
                ('hobbies', models.TextField(blank=True)),
            ],
            options={
                'permissions': ('can_view_limited_profile', 'Can view limited user profile'),
            },
        ),
        migrations.CreateModel(
            name='Milestone',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('due_date', models.DateField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(default=b'new', max_length=8, choices=[(b'new', b'New'), (b'modified', b'Modified'), (b'approved', b'Approved'), (b'denied', b'Denied')])),
                ('approval_date', models.DateTimeField(null=True, blank=True)),
                ('approver', models.ForeignKey(related_name='milestone_approver', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('author', models.ForeignKey(related_name='milestone_author', to=settings.AUTH_USER_MODEL)),
                ('editor', models.ForeignKey(related_name='milestone_editor', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('due_date', 'name'),
                'permissions': (('approve_milestone', 'Can approve milestone'),),
            },
        ),
        migrations.CreateModel(
            name='MilestoneNote',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('text', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('author', models.ForeignKey(related_name='authored_milestone_notes', to=settings.AUTH_USER_MODEL)),
                ('milestone', models.ForeignKey(to='crm.Milestone')),
            ],
            options={
                'ordering': ['milestone', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Opportunity',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('title', models.CharField(help_text=b'Provide a name for the Opportunity (or name of the associated proposal).', max_length=128)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('proposal_status', models.CharField(default=b'in-progress', max_length=16, choices=[(b'0-in-progress', b'In Progress'), (b'1-submitted', b'Submitted'), (b'2-counter', b'Counter Received'), (b'3-accepted', b'Accepted'), (b'4-cancelled', b'Cancelled'), (b'5-declined', b'Declined')])),
                ('proposal_status_date', models.DateTimeField(help_text=b'Timestamp for when the proposal status was set.', auto_now_add=True)),
                ('differentiating_value', models.ForeignKey(blank=True, to='crm.DistinguishingValueChallenge', help_text=b"If the Opportunity started as a Lead's Differentiating Value, associate it here.", null=True)),
                ('lead', models.ForeignKey(to='crm.Lead')),
            ],
        ),
        migrations.CreateModel(
            name='PaidTimeOffLog',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('date', models.DateField()),
                ('amount', models.DecimalField(max_digits=7, decimal_places=2)),
                ('comment', models.TextField(blank=True)),
                ('pto', models.BooleanField(default=True, help_text=b'Select for Paid Time Off (Unselect for Unpaid Time Off)')),
            ],
            options={
                'ordering': ('user_profile', '-date'),
            },
        ),
        migrations.CreateModel(
            name='PaidTimeOffRequest',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('request_date', models.DateTimeField(auto_now_add=True)),
                ('pto', models.BooleanField(default=True, help_text=b'Is the request for Paid Time Off (checked) or Unpaid Time Off (unchecked)?', verbose_name=b'Select for Paid Time Off (Unselect for Unpaid Time Off)')),
                ('pto_start_date', models.DateField(null=True, verbose_name=b'Time Off Start Date', blank=True)),
                ('pto_end_date', models.DateField(null=True, verbose_name=b'Time Off End Date', blank=True)),
                ('amount', models.DecimalField(verbose_name=b'Number of Hours', max_digits=7, decimal_places=2)),
                ('comment', models.TextField(verbose_name=b'Reason / Description', blank=True)),
                ('approval_date', models.DateTimeField(null=True, blank=True)),
                ('process_date', models.DateTimeField(null=True, blank=True)),
                ('status', models.CharField(default=b'pending', max_length=24, choices=[(b'modified', b'Modified'), (b'processed', b'Processed'), (b'approved', b'Approved'), (b'pending', b'Pending'), (b'denied', b'Denied')])),
                ('approver_comment', models.TextField(verbose_name=b'Reason / Note', blank=True)),
                ('approver', models.ForeignKey(related_name='pto_approver', on_delete=django.db.models.deletion.SET_NULL, blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('processor', models.ForeignKey(related_name='pto_processor', on_delete=django.db.models.deletion.SET_NULL, blank=True, to=settings.AUTH_USER_MODEL, null=True)),
            ],
            options={
                'ordering': ('user_profile', '-pto_start_date'),
                'permissions': (('can_approve_pto_requests', 'Can approve PTO requests'), ('can_process_pto_requests', 'Can payroll process PTO requests')),
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('code', models.CharField(help_text=b'Auto-generated project code for tracking.', max_length=12, verbose_name=b'Project Code', blank=True)),
                ('ext_code', models.CharField(max_length=255, null=True, verbose_name=b'External Project ID', blank=True)),
                ('tracker_url', models.CharField(default=b'', max_length=255, verbose_name=b'Wiki Url', blank=True)),
                ('project_department', models.CharField(default=b'other', max_length=16, choices=[(b'admin', b'Admin'), (b'elec-avionics', b'Electrical/Avionics'), (b'finance', b'Finance'), (b'hr', b'Human Resources'), (b'integration', b'Integration'), (b'it', b'Information Technology'), (b'marketing', b'Marketing'), (b'mech', b'Mechanical Systems'), (b'ops', b'Operations'), (b'sales', b'Sales'), (b'struct', b'Structures'), (b'tech-serv', b'Technical Services'), (b'other', b'Other')])),
                ('description', models.TextField()),
                ('year', models.SmallIntegerField(null=True, blank=True)),
                ('activity_group', models.ForeignKey(related_name='activity_group', on_delete=django.db.models.deletion.SET_NULL, verbose_name=b'restrict activities to', blank=True, to='entries.ActivityGroup', null=True)),
                ('binder', models.ForeignKey(related_name='binder', to=settings.AUTH_USER_MODEL, help_text=b'Who is responsible for project/customer follow-up?')),
                ('business', models.ForeignKey(related_name='new_business_projects', verbose_name=b'Company', to='crm.Business')),
                ('business_department', models.ForeignKey(related_name='new_business_department_projects', on_delete=django.db.models.deletion.SET_NULL, verbose_name=b'Company Department', blank=True, to='crm.BusinessDepartment', null=True)),
                ('client_primary_poc', models.ForeignKey(on_delete=django.db.models.deletion.SET_NULL, blank=True, to='crm.Contact', null=True)),
                ('finder', models.ForeignKey(related_name='finder', to=settings.AUTH_USER_MODEL, help_text=b'Who brought in this project?')),
                ('point_person', models.ForeignKey(related_name='minder', verbose_name=b'Minder', to=settings.AUTH_USER_MODEL, help_text=b'Who is the Project Manager?')),
                ('status', models.ForeignKey(related_name='projects_with_status', to='crm.Attribute')),
                ('tags', taggit.managers.TaggableManager(to='taggit.Tag', through='taggit.TaggedItem', help_text='A comma-separated list of tags.', verbose_name='Tags')),
                ('type', models.ForeignKey(related_name='projects_with_type', to='crm.Attribute')),
            ],
            options={
                'ordering': ('code', 'name', 'status', 'type'),
                'db_table': 'timepiece_project',
                'permissions': (('view_project', 'Can view project'), ('email_project_report', 'Can email project report'), ('view_project_time_sheet', 'Can view project time sheet'), ('export_project_time_sheet', 'Can export project time sheet'), ('generate_project_invoice', 'Can generate project invoice')),
            },
        ),
        migrations.CreateModel(
            name='ProjectAttachment',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('bucket', models.CharField(max_length=64)),
                ('uuid', models.TextField()),
                ('filename', models.CharField(max_length=128)),
                ('upload_datetime', models.DateTimeField(auto_now_add=True)),
                ('description', models.TextField(null=True, blank=True)),
                ('project', models.ForeignKey(to='crm.Project')),
                ('uploader', models.ForeignKey(to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ProjectRelationship',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('project', models.ForeignKey(related_name='project_relationships', to='crm.Project')),
            ],
            options={
                'db_table': 'timepiece_projectrelationship',
            },
        ),
        migrations.CreateModel(
            name='RelationshipType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=255)),
                ('slug', models.SlugField(max_length=255)),
            ],
            options={
                'db_table': 'timepiece_relationshiptype',
            },
        ),
        migrations.CreateModel(
            name='TemplateDifferentiatingValue',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('short_name', models.CharField(help_text=b'Provide a short identifying name for this Template DV.', max_length=32)),
                ('probing_question', models.TextField(help_text=b'Provide a probing question that could be used in a conversation with a potential client.')),
            ],
            options={
                'ordering': ['short_name'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('employee_type', models.CharField(default=b'inactive', max_length=24, choices=[(b'salary', b'Salary'), (b'hourly', b'Hourly'), (b'inactive', b'Inactive'), (b'external', b'External')])),
                ('earns_pto', models.BooleanField(default=False, help_text=b'Does the employee earn Paid Time Off?')),
                ('earns_holiday_pay', models.BooleanField(default=False, help_text=b'Does the employee earn Holiday Pay?')),
                ('pto_accrual', models.FloatField(default=0.0, help_text=b'Number of PTO hours earned per pay period for the employee.', verbose_name=b'PTO Accrual Amount')),
                ('hire_date', models.DateField(null=True, blank=True)),
                ('department', models.CharField(default=b'other', max_length=16, choices=[(b'admin', b'Admin'), (b'elec-avionics', b'Electrical/Avionics'), (b'finance', b'Finance'), (b'hr', b'Human Resources'), (b'integration', b'Integration'), (b'it', b'Information Technology'), (b'marketing', b'Marketing'), (b'mech', b'Mechanical Systems'), (b'ops', b'Operations'), (b'sales', b'Sales'), (b'struct', b'Structures'), (b'tech-serv', b'Technical Services'), (b'other', b'Other')])),
                ('weekly_schedule', models.CharField(default=b'0,0,0,0,0,0,0', max_length=128)),
                ('utilization', models.FloatField(default=80, help_text=b'The percentage of time the employee should spend on billable work as opposed to non-billable work.', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('business', models.ForeignKey(to='crm.Business')),
                ('user', models.OneToOneField(related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'timepiece_userprofile',
            },
        ),
        migrations.AddField(
            model_name='projectrelationship',
            name='types',
            field=models.ManyToManyField(related_name='project_relationships', to='crm.RelationshipType', blank=True),
        ),
        migrations.AddField(
            model_name='projectrelationship',
            name='user',
            field=models.ForeignKey(related_name='project_relationships', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='project',
            name='users',
            field=models.ManyToManyField(related_name='user_projects', through='crm.ProjectRelationship', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='paidtimeoffrequest',
            name='user_profile',
            field=models.ForeignKey(verbose_name=b'Employee', to='crm.UserProfile'),
        ),
        migrations.AddField(
            model_name='paidtimeofflog',
            name='pto_request',
            field=models.ForeignKey(blank=True, to='crm.PaidTimeOffRequest', null=True),
        ),
        migrations.AddField(
            model_name='paidtimeofflog',
            name='user_profile',
            field=models.ForeignKey(to='crm.UserProfile'),
        ),
        migrations.AddField(
            model_name='opportunity',
            name='project',
            field=models.ManyToManyField(help_text=b'If this Opportunity results in a project, identify the project(s) here.', to='crm.Project', null=True, blank=True),
        ),
        migrations.AddField(
            model_name='opportunity',
            name='proposal',
            field=models.ForeignKey(blank=True, to='crm.LeadAttachment', help_text=b'After uploading the proposal as an attachment to the Lead, associate the proposal with this Opportunity.', null=True),
        ),
        migrations.AddField(
            model_name='milestone',
            name='project',
            field=models.ForeignKey(to='crm.Project'),
        ),
        migrations.AddField(
            model_name='limitedaccessuserprofile',
            name='profile',
            field=models.OneToOneField(related_name='limited', to='crm.UserProfile'),
        ),
        migrations.AddField(
            model_name='distinguishingvaluechallenge',
            name='lead',
            field=models.ForeignKey(blank=True, to='crm.Lead', null=True),
        ),
        migrations.AddField(
            model_name='businessdepartment',
            name='poc',
            field=models.ForeignKey(related_name='business_department_poc', verbose_name=b'Primary Contact', blank=True, to='crm.Contact', null=True),
        ),
        migrations.AddField(
            model_name='business',
            name='primary_contact',
            field=models.ForeignKey(related_name='business_poc', verbose_name=b'Primary Contact', blank=True, to='crm.Contact', null=True),
        ),
        migrations.AddField(
            model_name='business',
            name='tags',
            field=taggit.managers.TaggableManager(to='taggit.Tag', through='taggit.TaggedItem', help_text='A comma-separated list of tags.', verbose_name='Tags'),
        ),
        migrations.AlterUniqueTogether(
            name='attribute',
            unique_together=set([('type', 'label')]),
        ),
        migrations.AddField(
            model_name='approvedmilestone',
            name='milestone',
            field=models.ForeignKey(related_name='approvals', to='crm.Milestone'),
        ),
        migrations.AddField(
            model_name='approvedmilestone',
            name='project',
            field=models.ForeignKey(to='crm.Project'),
        ),
        migrations.AddField(
            model_name='activitygoal',
            name='milestone',
            field=models.ForeignKey(blank=True, to='crm.Milestone', null=True),
        ),
        migrations.AddField(
            model_name='activitygoal',
            name='project',
            field=models.ForeignKey(blank=True, to='crm.Project', null=True),
        ),
        migrations.AlterUniqueTogether(
            name='projectrelationship',
            unique_together=set([('user', 'project')]),
        ),
    ]
